package com.idat.ec4.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.idat.ec4.model.Proveedor;
import com.idat.ec4.service.ProveedorService;

@RestController
@RequestMapping("/api")
public class ProveedorController {

	@Autowired
	ProveedorService service;
	
	@GetMapping("/Proveedor")
	public ResponseEntity<List<Proveedor>> listarProveedor(){
		List<Proveedor> obj = service.listarProveedor();
		return new ResponseEntity<List<Proveedor>>(obj, HttpStatus.OK);
	}
	
	@PostMapping("/Proveedor")
	public ResponseEntity<?> crearProveedor(@RequestBody Proveedor Proveedor){
		
		Proveedor obj = null;
		Map<String, Object> respuesta = new HashMap<>();
		
        try{
        	obj = service.crearProveedor(Proveedor);
        } catch (DataAccessException e) {
        	respuesta.put("mensaje", "No se pudo insertar el objeto en la base de datos.");
        	respuesta.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
            return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.INTERNAL_SERVER_ERROR);
        }
        respuesta.put("mensaje", "El objeto ha sido creado satisfactoriamente en la base de datos.");
        respuesta.put("cliente", obj);
        return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.CREATED);
		
	}
	
	@PutMapping("/Proveedor")
	public ResponseEntity<?> editarProveedor(@RequestBody Proveedor Proveedor){
		
		Proveedor obj = null;
		Map<String, Object> respuesta = new HashMap<>();
		
        try{
        	obj = service.editarProveedor(Proveedor);
        } catch (DataAccessException e) {
        	respuesta.put("mensaje", "No se pudo actualizar el objeto en la base de datos.");
        	respuesta.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
            return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.INTERNAL_SERVER_ERROR);
        }
        respuesta.put("mensaje", "El objeto ha sido creado satisfactoriamente en la base de datos.");
        respuesta.put("cliente", obj);
        return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.ACCEPTED);
		
	}
	
	@DeleteMapping("/Proveedor/{id}")
	public ResponseEntity<?> eliminarProveedor(@PathVariable Long id) throws Exception{
		
		Map<String, Object> respuesta = new HashMap<>();
		
        try{
        	service.eliminarProveedor(id);
        } catch (DataAccessException e) {
        	respuesta.put("mensaje", "No se pudo eliminar el objeto en la base de datos.");
        	respuesta.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
            return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.INTERNAL_SERVER_ERROR);
        }
        respuesta.put("mensaje", "El objeto ha sido eliminado satisfactoriamente en la base de datos.");
        return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.NO_CONTENT);
		
	}
	
	@GetMapping("/Proveedor/{id}")
	public ResponseEntity<?> listarPorId(@PathVariable Long id){
		
		Proveedor obj = null;
		Map<String, Object> respuesta = new HashMap<>();
		
		try {
			obj = service.ListarPorId(id);
		}catch (DataAccessException e) {
			// TODO: handle exception
			respuesta.put("mensaje", "Error. No se produjo la consulta en la base de datos.");
			respuesta.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
			return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.INTERNAL_SERVER_ERROR);
		}
		if (obj == null) {
			respuesta.put("mensaje", "No se encontraron coincidencias.");
			return new ResponseEntity<Map<String, Object>>(respuesta, HttpStatus.NOT_FOUND);
		}
		
		return new ResponseEntity<Proveedor>(obj, HttpStatus.OK);

	}
	
}
